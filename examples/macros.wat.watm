(module
	
	import "../library/utility.watm"
	import "../library/memory.watm"
	import "../library/string.watm"
	import "host" "table" (table 1 anyfunc)
	memory (import "host" "memory") 1
	type $void_to_void (func)
	
	func main
		
		setup
		test_call_macro
		test_string_macro_expansion
		test_integer_macro_expansion
		test_func_ref_macro
		test_set_get_macros 42
		test_flow_macros
		
	func setup
		
		memory_bootstrap
		
	func test_call_macro
		
		print "------------------------------"
		print "Test call macro!"
		print "------------------------------"
		(call print (string "with call keyword, with string keyword"))
		print "without call keyword, without string keyword"
		
	func test_string_macro_expansion
		
		print "------------------------------"
		print "Test string macro"
		print "------------------------------"
		
	func test_integer_macro_expansion
		
		print "------------------------------"
		print "Test integer macro expansion"
		print "------------------------------"
		print_integer 100
	
	func test_func_ref_macro
		
		print "------------------------------"
		print "Test function reference macro!"
		print "------------------------------"
		call_indirect (type $void_to_void) (funcref "test_function_first_class_a" "macros")
		call_indirect (type $void_to_void) (funcref "test_function_first_class_b" "macros")
		
	func test_function_first_class_a
		
		print "------------------------------"
		print "First class function A has been called using a funcref macro!"
		print "------------------------------"
		
	func test_function_first_class_b
		
		print "------------------------------"
		print "First class function B has been called using a funcref macro!"
		print "------------------------------"
		
	func test_set_get_macros (param $a i32)
		
		local $c i32
		print "------------------------------"
		print "Test local variable get and set! (partially implemented)"
		print "------------------------------"
		print_integer a
		print "Set values which have not been declared"
		set b to 88
		print_integer b
		set string to "string"
		;; let a as i32 be 1
		
	func test_flow_macros
		
		print "------------------------------"
		print "Test flow macros!"
		print "------------------------------"
		
		repeat with k from 0 to 20 every 2		;; every other
			
			print_integer k
			if (k greater 5 and k less 15)
				print "5 < k < 15"
			if (k equals 6)
				print "k equals 6"
			if (k equals 10)
				print "k equals 10"
			if (k greater 15)
				break
)
