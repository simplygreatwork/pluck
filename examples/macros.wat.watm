
module
	
	import "../library/utility.watm"
	import "../library/memory.watm"
	import "../library/string.watm"
	import "../library/number.watm"
	import "../library/boolean.watm"
	import "../library/operator.watm"
	import "../library/types.watm"
	import "../library/console.watm"
	import "host" "table" (table 1 anyfunc)
	memory (import "host" "memory") 1
	type $void_to_void (func)
	
	func main
		
		setup
		test_call_macro
		test_string_macro_expansion
		test_integer_macro_expansion
		test_func_ref_macro
		test_set_get_macros 42
		test_flow_macros
		test_negation
		test_arithmetic
		test_and_or
		test_true_false
		test_parameters "one" "two" "three"
		
	func setup
		
		memory_bootstrap
		
	func test_call_macro
		
		print "------------------------------"
		print "Test call macro!"
		print "------------------------------"
		(call print (string "with call keyword, with string keyword"))
		print "without call keyword, without string keyword"
		
	func test_string_macro_expansion
		
		print "------------------------------"
		print "Test string macro"
		print "------------------------------"
		
	func test_integer_macro_expansion
		
		print "------------------------------"
		print "Test integer macro expansion"
		print "------------------------------"
		print 100
		
	func test_func_ref_macro
		
		print "------------------------------"
		print "Test function reference macro!"
		print "------------------------------"
		call_indirect (type $void_to_void) (ref "test_function_first_class_a")
		call_indirect (type $void_to_void) (ref "test_function_first_class_b")
		
	func test_function_first_class_a
		
		print "------------------------------"
		print "First class function A has been called using a ref macro!"
		print "------------------------------"
		
	func test_function_first_class_b
		
		print "------------------------------"
		print "First class function B has been called using a ref macro!"
		print "------------------------------"
		
	func test_set_get_macros (param $a i32)
		
		local $c i32
		print "------------------------------"
		print "Test local variable get and set! (partially implemented)"
		print "------------------------------"
		print a
		print "Set values which have not been declared"
		set b to 88
		print b
		set string to "string"
		
	func test_flow_macros
		
		print "------------------------------"
		print "Test flow macros!"
		print "------------------------------"
		
		repeat with k from 0 to 20 every 2		;; every other
			
			print k
			if (k greater 5 and k less 15)
				print "5 < k < 15"
			if (k equals 6)
				print "k equals 6"
			if (k equals 10)
				print "k equals 10"
			if (k greater 15)
				break
				
	func test_negation
		
		print "------------------------------"
		print "Test negation!"
		print "------------------------------"
		
		set value to 1
		set result to not value equals 2
		print result
		set value to 2
		set result to not value equals 2
		print result
		print not value equals 3
		
	func test_arithmetic
		
		print "------------------------------"
		print "Test arithmetic!"
		print "------------------------------"
		
		set value to 1 plus 1
		print value
		set value to value minus 2
		print value
		
	func test_and_or
		
		print "------------------------------"
		print "Test and/or!"
		print "------------------------------"
		
		set first to 1 equals 1 and 2 equals 2
		print first
		set second to 1 equals 2 or 2 equals 2
		print second
		
	func test_true_false
		
		print true equals true
		print true equals false
		
	func test_parameters accepts one two three
		
		print "------------------------------"
		print "Test parameters!"
		print "------------------------------"
		
		print one
		print two
		print three
		