
module
	
	;; a very basic conception to illustrate fundamentally how closures might work simply
	;; by using a stack list of argument maps on the heap
	;; consider implementing closures at the library level first before implementing syntax
	;; consider and remember that the inner function could be called externally
	;; so need to maintain a list of stacks per function on entry
	
	import "../library/utility.watm"
	import "../library/memory.watm"
	import "../library/string.watm"
	import "../library/number.watm"
	import "../library/stack.watm"
	import "../library/list.watm"
	import "../library/map.watm"
	import "../library/types.watm"
	import "../library/console.watm"
	import "host" "table" (table 1 anyfunc)
	memory (import "host" "memory") 1
	
	func main
		
		memory_bootstrap
		test_stack
		print " "
		
	func test_stack
		
		set arguments to (stack_new)
		stack_set arguments "outer.key" "outer.value"
		deep arguments
		print " "
		print ">>> outer stack <<<"
		stack_dump arguments
		stack_exit arguments
		
	func deep accepts arguments
		
		stack_enter arguments
		stack_set arguments "deep.key" "deep.value"
		deeper arguments
		print " "
		print ">>> deep stack <<<"
		stack_dump arguments
		stack_exit arguments
		
	func deeper accepts arguments
		
		stack_enter arguments
		stack_set arguments "deeper.key" "deeper.value"
		deepest arguments
		print " "
		print ">>> deeper stack <<<"
		stack_dump arguments
		stack_exit arguments
		
	func deepest accepts arguments
		
		stack_enter arguments
		stack_set arguments "deepest.key" "deepest.value"
		print " "
		print ">>> deepest stack <<<"
		stack_dump arguments
		stack_exit arguments
		