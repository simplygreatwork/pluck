
module
	
	directive literals as objects
	import "../library/utility.watm"
	import "../library/memory.watm"
	import "../library/resource.watm"
	import "../library/system.watm"
	import "../library/string.watm"
	import "../library/number.watm"
	import "../library/boolean.watm"
	import "../library/types.watm"
	import "../library/function.watm"
	import "../library/object.watm"
	import "../library/console.watm"
	import "../library/list.watm"
	import "../library/map.watm"
	import "../library/vector.watm"
	import "../library/operator.watm"
	import "../library/objects/string.watm"
	import "../library/objects/list.watm"
	import "../library/objects/map.watm"
	import "../library/objects/number.watm"
	import "../library/objects/boolean.watm"
	import "../library/objects/function.watm"
	import "host" "table" (table 1 anyfunc)
	memory (import "host" "memory") 1
	
	;; object-orientation work in progress (with literal objects)
	
	function main
		
		system_bootstrap
		create_list
		create_map
		create_string
		create_number
		create_boolean
		create_function
		create_object
		
	function create_list
		
		heading "create_list"
		set list to (object_list_new)
		list append "0"
		list_append (list subject) "1"
		list append "2"
		list iterate (function "create_list_iterate_each") 0
		list get 0
		print (list get 1)
		
	function create_list_iterate_each accepts list item value index context
		
		print value
		
	function create_map
		
		heading "create_map"
		set map to (object_map_new)
		map put "zero" "0"
		map put "one" "1"
		map put "two" "2"
		map iterate (function "create_map_iterate_each") 0
		print (map get "zero")
		print (map get "one")
		print (map_get (map subject) (string "two"))
		map get "two"
		
	function create_map_iterate_each accepts map key value index context
		
		print key
		print value
		
	function create_string
		
		heading "create_string"
		print ("abc" append "123")
		
	function create_number
		
		heading "create_number"
		print ((1 add 2) add 3)
		
	function create_boolean
		
		heading "create_boolean"
		print ("true: " append true)
		print ("false: " append false)
		set condition to (1 plus 1 equals 2)
		if condition (print "1 plus 1 equals 2")
		
	function create_function
		
		heading "create_function"
		set function_ to (object_function_from_function (function "create_list_iterate_each"))
		print (function_ id)
		print (function_ result)
		
	function create_object
		
		heading "create_object"
		set object to (object_new)
		object value = 42
		print ("object value: " append (object value))
		object function_with_zero_arguments = (function "function_with_zero_arguments")
		object function_with_zero_arguments
		object function_with_one_argument is (function "function_with_one_argument")
		object function_with_one_argument "one"
		object function_with_two_arguments = (function "function_with_two_arguments")
		object function_with_two_arguments "one" "two"
		object function_with_three_arguments is (function "function_with_three_arguments")
		object function_with_three_arguments "one" "two" "three"
		
	function function_with_zero_arguments accepts object
		
		print "function_with_zero_arguments called"
		
	function function_with_one_argument accepts object one
		
		set string to "function_with_one_argument called with value: "
		set string to (string append one)
		print string
		
	function function_with_two_arguments accepts object one two
		
		set string to "function_with_two_arguments called with values: "
		set string to (string append (one append ", "))
		set string to (string append (two append " "))
		print string
		
	function function_with_three_arguments accepts object one two three
		
		set string to "function_with_two_arguments called with values: "
		set string to (string append (one append ", "))
		set string to (string append (two append ", "))
		set string to (string append (three append " "))
		print string
		
	function add_one accepts object value (result i32)
		
		return (number_add value 1)
		
	function heading accepts value
		
		print " "
		print "--------------------"
		print value
		print "--------------------"
		