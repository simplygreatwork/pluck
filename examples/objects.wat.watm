
module
	
	import "../library/utility.watm"
	import "../library/memory.watm"
	import "../library/string.watm"
	import "../library/number.watm"
	import "../library/boolean.watm"
	import "../library/types.watm"
	import "../library/function.watm"
	import "../library/object.watm"
	import "../library/console.watm"
	import "host" "table" (table 1 anyfunc)
	memory (import "host" "memory") 1
	
	;; object-orientation work in progress
	
	func main
		
		memory_bootstrap
		create_object
		
	func create_object
		
		set object to (object_new)
		object value = 42
		print (string_append "object value: " (number_to_string (object "value")))
		object function_with_zero_arguments = (function_new (ref "function_with_zero_arguments"))
		object function_with_zero_arguments
		object function_with_one_argument is (function_new (ref "function_with_one_argument"))
		object function_with_one_argument "one"
		object function_with_two_arguments = (function_new (ref "function_with_two_arguments"))
		object function_with_two_arguments "one" "two"
		object function_with_three_arguments is (function_new (ref "function_with_three_arguments"))
		object function_with_three_arguments "one" "two" "three"
		print object
		
	func function_with_zero_arguments
		
		print "function_with_zero_arguments called"
		
	func function_with_one_argument accepts one (result i32)
		
		set string to "callable_with_arguments called with value: "
		set string to (string_append string (string_append one " "))
		print string
		return string
		
	func function_with_two_arguments accepts one two (result i32)
		
		set string to "callable_with_arguments called with value: "
		set string to (string_append string (string_append one ", "))
		set string to (string_append string (string_append two " "))
		print string
		return string
		
	func function_with_three_arguments accepts one two three (result i32)
		
		set string to "callable_with_arguments called with value: "
		set string to (string_append string (string_append one ", "))
		set string to (string_append string (string_append two ", "))
		set string to (string_append string (string_append three " "))
		print string
		return string
		