
module
	
	import "../library/utility.watm"
	import "../library/memory.watm"
	import "../library/string.watm"
	import "../library/number.watm"
	import "../library/boolean.watm"
	import "../library/types.watm"
	import "../library/console.watm"
	import "host" "table" (table 1 anyfunc)
	memory (import "host" "memory") 1
	
	func main
		
		memory_bootstrap
		set method to (func one accepts value
			print value
		)
		set method to (func accepts value
			print value
		)
		invoke method()
		
		parent on "exit" (function accepts node index
			
		)

	func callable accepts one two three
		
		print one
		print two
		print three
		
// if func has no name and not accepts keyword, then generate a name
// replace the func expression with 
// move the func to the top level
// whenever the first item of an expression is a function object, invoke automatically
// still want a pre-transformer
	// can insert function names
	// can change to func from function or method
	// one more ?