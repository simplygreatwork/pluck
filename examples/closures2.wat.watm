
module

	;; a very basic conception to illustrate fundamentally how closures might work simply
	;; by using a stack list of argument maps on the heap
	;; consider implementing closures at the library level first before implementing syntax
	;; consider and remember that the inner function could be called externally
	;; so need to maintain a list of stacks per function on entry
	
	import "../library/utility.watm"
	import "../library/memory.watm"
	import "../library/string.watm"
	import "../library/stack.watm"
	import "../library/map.watm"
	import "host" "table" (table 1 anyfunc)
	memory (import "host" "memory") 1
	
	func main
		
		memory_bootstrap
		set stack to stack_new
		stack_enter stack
		stack_set stack "one.key" "one.value"
		stack_enter stack
		stack_set stack "two.key" "two.value"
		stack_enter stack
		stack_set stack "three.key" "three.value"
		print stack_to_string stack
		stack_exit stack
		print stack_to_string stack
		stack_exit stack
		print stack_to_string stack
		
	func scope_new
		map_new
		