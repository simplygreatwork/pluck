(module
	
	(import "./utility.watm")
	(import "./memory.watm")
	(import "./indirect.watm")
	(import "./resource.watm")
	(import "./string.watm")
	(memory (import "host" "memory") 1)
	(import "host" "table" (table 1 anyfunc))
	(type $i32_i32_i32_to_void (func (param i32) (param i32) (param i32)))
	
	;; use f32 float instead
	
	(func $number_bytes (result i32)
		(i32.const 4)
	)
	
	(func $number_new (param $value i32) (result i32)
		
		(local $number i32)
		(set_local $number (call $memory_allocate (typeof "number") (call $number_bytes)))
		(call $number_value_set (get_local $number) (get_local $value))
		(get_local $number)
	)
	
	(func $number_clone (param $number i32) (result i32)
		(call $number_new (call $number_value (get_local $number)))
	)
	
	(func $number_value (param $number i32) (result i32)
		(call $memory_load (get_local $number) (i32.const 0))
	)
	
	(func $number_value_set (param $number i32) (param $value i32)
		(call $memory_store (get_local $number) (i32.const 0) (get_local $value))
	)
	
	(func $number_add (param $a i32) (param $b i32) (result i32)
		
		(call $number_new (i32.add
			(call $number_value (get_local $a))
			(call $number_value (get_local $b))
		))
	)
	
	(func $number_subtract (param $a i32) (param $b i32) (result i32)
		
		(call $number_new (i32.sub
			(call $number_value (get_local $a))
			(call $number_value (get_local $b))
		))
	)
	
	(func $number_equals (param $a i32) (param $b i32) (result i32)
		
		(local $result i32)
		(set_local $result (i32.const 0))
		(if (i32.eq (call $number_value (get_local $a)) (call $number_value (get_local $b))) (then
			(set_local $result (i32.const 1))
		) (else
			(set_local $result (i32.const 0))
		))
		(get_local $result)
	)
	
	(func $number_compare (param $a i32) (param $b i32) (result i32)
		
		(local $result i32)
		(set_local $result (i32.const 0))
		(if (i32.lt_s (call $number_value (get_local $a)) (call $number_value (get_local $b))) (then
			(set_local $result (i32.const -1))
		) (else
			(if (i32.gt_s (call $number_value (get_local $a)) (call $number_value (get_local $b))) (then
				(set_local $result (i32.const 1))
			))
		))
		(get_local $result)
	)
	
	(func $number_iterate (param $number i32) (param $function i32) (param $context i32)
		
		(local $index i32)
		(local $value i32)
		(set_local $index (i32.const 0))
		(set_local $value (call $number_value (get_local $number)))
		(block (loop
			(if (i32.eq (get_local $index) (get_local $value)) (then
				(br 2)
			))
			(call_indirect (type $i32_i32_i32_to_void)
				(get_local $number) (call $number_new (get_local $index)) (get_local $context)
				(call $function_id_ (get_local $function))
			)
			(set_local $index (i32.add (get_local $index) (i32.const 1)))
			(br 0)
		))
	)
	
	(func $number_to_string (param $number i32) (result i32)
		
		(local $result i32)
		(local $primitive i32)
		(local $remainder i32)
		(set_local $result (call $string_new (i32.const 0)))
		(set_local $primitive (call $number_value (get_local $number)))
		(block (loop
			(set_local $remainder (i32.rem_u (get_local $primitive) (i32.const 10)))
			(set_local $primitive (i32.div_u (get_local $primitive) (i32.const 10)))
			(set_local $result (call $number_to_string_concat (get_local $result) (get_local $remainder)))
			(if (i32.lt_u (get_local $primitive) (i32.const 10)) (then (br 2)))
			(br 0)
		))
		(if (i32.gt_u (get_local $primitive) (i32.const 0)) (then
			(set_local $result (call $number_to_string_concat (get_local $result) (get_local $primitive)))
		))
		(get_local $result)
	)
	
	(func $number_to_string_concat (param $string i32) (param $digit i32) (result i32)
		
		(local $char i32)
		(set_local $char (call $string_new (i32.const 1)))
		(call $string_char_set (get_local $char) (i32.const 0) (i32.add (i32.const 48) (get_local $digit)))
		(call $string_append (get_local $char) (get_local $string))		
	)
)
