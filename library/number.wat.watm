(module
	
	(import "./utility.watm")
	(import "./memory.watm")
	(import "./string.watm")
	(memory (import "host" "memory") 1)
	
	;; use f32 float instead
	
	(func $number_bytes (result i32)
		(i32.const 4)
	)
	
	(func $number_new (param $value i32) (result i32)
		
		(local $number i32)
		(set_local $number (call $memory_allocate (typeof "number") (call $number_bytes)))
		(call $number_value_set (get_local $number) (get_local $value))
		(get_local $number)
	)
	
	(func $number_value (param $number i32) (result i32)
		(call $memory_load (get_local $number) (i32.const 0))
	)
	
	(func $number_value_set (param $number i32) (param $value i32)
		(call $memory_store (get_local $number) (i32.const 0) (get_local $value))
	)
	
	(func $number_add (param $number_a i32) (param $number_b i32) (result i32)
		
		(call $number_new
			(i32.add
				(call $number_value (get_local $number_a))
				(call $number_value (get_local $number_b))
			)
		)
	)
	
	(func $number_subtract (param $number_a i32) (param $number_b i32) (result i32)
		
		(call $number_new
			(i32.sub
				(call $number_value (get_local $number_a))
				(call $number_value (get_local $number_b))
			)
		)
	)

	(func $number_equals (param $number_a i32) (param $number_b i32) (result i32)

		(local $result i32)
		(set_local $result (i32.const 0))
		(if
			(i32.eq
				(call $number_value (get_local $number_a))
				(call $number_value (get_local $number_b))
			)
			(then (set_local $result (i32.const 1)))
			(else (set_local $result (i32.const 0)))
		)
		(get_local $result)
	)
	
	(func $number_compare (param $number_a i32) (param $number_b i32) (result i32)
		
		(local $result i32)
		(set_local $result (i32.const 0))
		(if
			(i32.lt_s (call $number_value (get_local $number_a)) (call $number_value (get_local $number_b)))
			(then (set_local $result (i32.const -1)))
			(else (if
				(i32.gt_s (call $number_value (get_local $number_a)) (call $number_value (get_local $number_b)))
				(then (set_local $result (i32.const 1)))
			))
		)
		(get_local $result)
	)
	
	(func $number_iterate (param $number i32)
		
	)
	
	(func $number_to_string (param $number i32) (result i32)
		(call $digit_to_string (call $number_value (get_local $number)))
	)
	
	(func $digit_to_string (param $digit i32) (result i32)
		
		(local $result i32)
		(local $result_code i32)
		(set_local $result_code (i32.const 63))
		(if
			(i32.ge_s (get_local $digit) (i32.const 0))
			(then
				(if
					(i32.le_s (get_local $digit) (i32.const 9))
					(then
						(set_local $result_code (i32.add (i32.const 48) (get_local $digit)))
					)
				)
			)
		)
		(set_local $result (call $string_new (i32.const 1)))
		(call $string_set_char (get_local $result) (i32.const 0) (get_local $result_code))
		(get_local $result)
	)
	
	(func $number_clone (param $number i32) (result i32)
		(call $number_new (call $number_value (get_local $number)))
	)
		
	(func $Number_random (result i32)
		(i32.const 0)		
	)
	
	(func $Number_max (param $number_a i32) (param $number_b i32) (result i32)
		(i32.const 0)
	)
)
