(module
	
	(import "./utility.watm")
	(import "./memory.watm")
	(import "./number.watm")
	(import "./string.watm")
	(import "./map.watm")
	(import "./function.watm")
	(memory (import "host" "memory") 1)
	(import "host" "table" (table 1 anyfunc))
	(global $global (import "host" "global") (mut i32))
	(type $i32_i32_i32_i32_i32_to_void (func (param i32) (param i32) (param i32) (param i32) (param i32)))
	
	(func $list_bytes (result i32)
		(i32.const 12)
	)
	
	(func $list_new (result i32)
		
		(local $list i32)
		(set_local $list (call $memory_allocate (typeof "list") (call $list_bytes)))
		(call $item_next_set (get_local $list) (get_local $list))
		(call $item_previous_set (get_local $list) (get_local $list))
		(call $item_value_set (get_local $list) (i32.const 0))
		(get_local $list)
	)
	
	(func $list_dump (param $list i32)
		
		(call $print_integer (call $item_next (get_local $list)))
		(call $print_integer (call $item_previous (get_local $list)))
		(call $print_integer (call $item_value (get_local $list)))
	)
	
	(func $list_append (param $list i32) (param $data i32)
		(call $item_append (call $item_previous (get_local $list)) (get_local $data))
	)
	
	(func $list_length (param $list i32) (result i32)
		
		(local $result i32)
		(local $item i32)
		(set_local $result (i32.const 0))
		(set_local $item (get_local $list))
		(block (loop
			(set_local $item (call $item_next (get_local $item)))
			(if (i32.eq (get_local $item) (get_local $list)) (then (br 2)))
			(set_local $result (i32.add (get_local $result) (i32.const 1)))
			(br 0)
		))
		(call $number_new (get_local $result))
	)
	
	(func $list_iterate (param $list i32) (param $function i32) (param $context i32)
		
		(local $index i32)
		(local $item i32)
		(local $item_next i32)
		(set_local $index (call $number_new (i32.const 0)))
		(set_local $item (get_local $list))
		;; important: must retain item_next before call_indirect in case of item deallocation
		(set_local $item (call $item_next (get_local $item)))
		(block (loop
			(set_local $item_next (call $item_next (get_local $item)))
			;; in case of empty list
			(br_if 1 (i32.eq (get_local $item) (get_local $item_next)))
			(call_indirect (type $i32_i32_i32_i32_i32_to_void)
				(get_local $list) (get_local $item) (call $item_value (get_local $item)) (get_local $index) (get_local $context)
				(call $function_id (get_local $function))
			)
			(set_local $item (get_local $item_next))
			(br_if 1 (i32.eq (get_local $item) (get_local $list)))
            (call $number_value_set (get_local $index) (i32.add (call $number_value (get_local $index)) (i32.const 1)))
			(br 0)
		))
	)
    
	(func $list_iterate_primitive (param $list i32) (param $function_id i32) (param $context i32)
		
		(local $index i32)
		(local $item i32)
		(local $item_next i32)
		(set_local $index (i32.const 0))
		(set_local $item (get_local $list))
		;; important: must retain item_next before call_indirect in case of item deallocation
		(set_local $item (call $item_next (get_local $item)))
		(block (loop
			(set_local $item_next (call $item_next (get_local $item)))
			;; in case of empty list
			(br_if 1 (i32.eq (get_local $item) (get_local $item_next)))
			(call_indirect (type $i32_i32_i32_i32_i32_to_void)
				(get_local $list) (get_local $item) (call $item_value (get_local $item)) (get_local $index) (get_local $context)
				(get_local $function_id)
			)
			(set_local $item (get_local $item_next))
			(br_if 1 (i32.eq (get_local $item) (get_local $list)))
            (set_local $index (i32.add (get_local $index) (i32.const 1))) 
			(br 0)
		))
	)

	(func $list_index_of (param $list i32) (param $item i32) (result i32)
		
		(local $context i32)
		(set_local $context (call $list_new))
		(call $list_append (get_local $context) (get_local $item))
		(call $list_append (get_local $context) (call $number_new (i32.const -1)))
		(call $list_iterate (get_local $list) (function "list_index_of_iterate_each") (get_local $context))
		(call $number_value (call $item_value (call $item_next (call $item_next (get_local $context)))))
	)
	
	(func $list_index_of_iterate_each (param $list i32) (param $item i32) (param $value i32) (param $index i32) (param $context i32)
		
		(local $find i32)
		(set_local $find (call $item_value (call $item_next (get_local $context))))
		(if (call $string_equals (get_local $find) (get_local $value)) (then
			(call $number_value_set
				(call $item_value (call $item_next (call $item_next (get_local $context))))
				(call $number_value (get_local $index))
			)
		))
	)
	
	(func $list_get (param $list i32) (param $index i32) (result i32)
		
		(local $context i32)
		(set_local $context (call $map_new))
		(call $map_set (get_local $context) (string "index") (get_local $index))
		(call $list_iterate (get_local $list) (function "list_get_iterate_each") (get_local $context))
		(call $map_get (get_local $context) (string "item"))
	)
	
	(func $list_get_iterate_each (param $list i32) (param $item i32) (param $value i32) (param $index i32) (param $context i32)
		
		(if (i32.eq (call $number_value (get_local $index)) (call $number_value (call $map_get (get_local $context) (string "index")))) (then
			(call $map_set (get_local $context) (string "item") (get_local $value))
		))
	)
	
	(func $list_set (param $list i32) (param $index i32) (param $value i32)
		
		(local $context i32)
		(set_local $context (call $list_new))
		(call $list_append (get_local $context) (get_local $index))
		(call $list_append (get_local $context) (get_local $value))
		(call $list_iterate (get_local $list) (function "list_set_iterate_each") (get_local $context))
	)
	
	(func $list_set_iterate_each (param $list i32) (param $item i32) (param $value i32) (param $index i32) (param $context i32)
		
		(local $index_ i32)
		(local $value_ i32)
		(set_local $index_ (call $item_value (call $item_next (get_local $context))))
		(set_local $value_ (call $item_value (call $item_next (call $item_next (get_local $context)))))
		(if (i32.eq (get_local $index) (get_local $index_)) (then
			(call $item_value_set (get_local $item) (get_local $value_))
		))
	)
	
	(func $list_to_string (param $list i32) (result i32)
		(i32.const 0)
	)
	
	(func $item_bytes (result i32)
		(i32.const 12)
	)
	
	(func $item_new (result i32)
		
		(local $item i32)
		(set_local $item (call $memory_allocate (typeof "list_item") (call $item_bytes)))
		(call $item_next_set (get_local $item) (get_local $item))
		(call $item_previous_set (get_local $item) (get_local $item))
		(call $item_value_set (get_local $item) (i32.const 0))
		(get_local $item)
	)
	
	(func $item_dump (param $item i32)
		
		(call $print_integer (call $item_next (get_local $item)))
		(call $print_integer (call $item_previous (get_local $item)))
		(call $print_integer (call $item_value (get_local $item)))
	)
	
	(func $item_next (param $item i32) (result i32)
		(call $memory_load (get_local $item) (i32.const 0))
	)
	
	(func $item_next_set (param $item i32) (param $next i32)
		(call $memory_store (get_local $item) (i32.const 0) (get_local $next))
	)
	
	(func $item_previous (param $item i32) (result i32)
		(call $memory_load (get_local $item) (i32.const 4))
	)
	
	(func $item_previous_set (param $item i32) (param $previous i32)
		(call $memory_store (get_local $item) (i32.const 4) (get_local $previous))
	)
	
	(func $item_value (param $item i32) (result i32)
		(call $memory_load (get_local $item) (i32.const 8))
	)
	
	(func $item_value_set (param $item i32) (param $value i32)
		(call $memory_store (get_local $item) (i32.const 8) (get_local $value))
	)
	
	(func $item_append (param $item i32) (param $data i32)
		
		(local $item_a i32)
		(local $item_b i32)
		(local $item_c i32)
		(set_local $item_a (get_local $item))
		(set_local $item_b (call $item_new))
		(set_local $item_c (call $item_next (get_local $item_a)))
		(call $item_next_set (get_local $item_a) (get_local $item_b))
		(call $item_next_set (get_local $item_b) (get_local $item_c))
		(call $item_previous_set (get_local $item_b) (get_local $item_a))
		(call $item_previous_set (get_local $item_c) (get_local $item_b))
		(call $item_value_set (get_local $item_b) (get_local $data))
	)
	
	(func $item_remove (param $item i32)
		
		(local $item_previous i32)
		(local $item_next i32)
		(set_local $item_previous (call $item_previous (get_local $item)))
		(set_local $item_next (call $item_next (get_local $item)))
		(call $item_previous_set (get_local $item_next) (get_local $item_previous))
		(call $item_next_set (get_local $item_previous) (get_local $item_next))
		(call $memory_deallocate (get_local $item))
	)
)